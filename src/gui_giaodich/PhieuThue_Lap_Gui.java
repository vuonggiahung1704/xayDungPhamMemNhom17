/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui_giaodich;

import java.util.ArrayList;
import java.util.Date;
import java.util.Formatter;
import java.util.List;

import javax.swing.DefaultListModel;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import database.Database;
import entities.ChiTietPhieuThue;
import entities.Dia;
import entities.KhachHang;
import entities.PhieuThue;
import entities.PhieuTra;
import entities.TaiKhoan;
import entities.TheLoai;
import entities.TieuDe;
import gui_baocao.BaoCao_Dia_Gui;
import gui_danhMuc.Dia_Gui;
import gui_danhMuc.KhachHang_Dialog;
import gui_danhMuc.KhachHang_Gui;
import gui_heThong.ThanhToan_Dialog;
import gui_main.Main_Gui;
import service.QuanLyCT_PhieuThue;
import service.QuanLyDia;
import service.QuanLyKhachHang;
import service.QuanLyPhieuThue;
import service.QuanLyTaiKhoan;
import service.QuanLyTheLoai;
import service.QuanLyTieuDe;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.print.PrinterException;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.LayoutStyle.ComponentPlacement;
import com.toedter.calendar.JDateChooser;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

/**
 *
 * @author nmrhu
 */
public class PhieuThue_Lap_Gui extends javax.swing.JPanel {

	/**
	 * Creates new form PhieuThue_Lap_Gui
	 */
	public PhieuThue_Lap_Gui() {
		setPreferredSize(new Dimension(1274, 600));
		initComponents();

		clearText();
		jPopupMenu1.add(jPanel3);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		Database.getInstance().connect();
		qldia = new QuanLyDia();
		qlkh = new QuanLyKhachHang();
		qltd = new QuanLyTieuDe();
		qltk = new QuanLyTaiKhoan();
		qlpt = new QuanLyPhieuThue();
		qlct_pt = new QuanLyCT_PhieuThue();

		txtPrint = new javax.swing.JTextArea();

		jPopupMenu1 = new javax.swing.JPopupMenu();
		jPopupMenu1.setFocusable(false);

		jPanel3 = new javax.swing.JPanel();
		jScrollPane3 = new javax.swing.JScrollPane();
		jList1 = new javax.swing.JList<>();
		jLabel7 = new javax.swing.JLabel();
		jLabel8 = new javax.swing.JLabel();
		jLabel9 = new javax.swing.JLabel();
		txtMaPt = new javax.swing.JTextField();
		txtKhachHang = new javax.swing.JTextField();
		txtKhachHang.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				txtKhachHangKeyPressed(evt);
			}
		});
		txtTienNo = new javax.swing.JTextField();
		btnThemKhachHang = new javax.swing.JButton();
		btnThemKhachHang.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				KhachHang_Dialog dialog = new KhachHang_Dialog(main, true);
				dialog.setTitle("Thêm khách hàng");
				dialog.setLocationRelativeTo(main);
				dialog.quyen = 1;
				dialog.setVisible(true);
			}
		});

		btnLuu = new javax.swing.JButton();
		btnLuu.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (kh == null) {
					txtKhachHang.requestFocus();
					JOptionPane.showMessageDialog(null, "Chọn khách hàng");
				} else if (list_CTPT.isEmpty()) {
					JOptionPane.showMessageDialog(null, "Vui lòng thêm đĩa vào phiếu thuê");
				} else {
					int tienNo = Integer.parseInt(txtTienNo.getText().toString());
					if (tienNo > 0) {
						hienThiThanhToan(tienNo);
						LapPhieuThue();
						printHoaDon(txtMaPt.getText(), thanhToan);
						try {
							txtPrint.print();
						} catch (PrinterException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}

					} else {
						LapPhieuThue();
						printHoaDon(txtMaPt.getText(), 0);
						try {
							txtPrint.print();
						} catch (PrinterException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					clearText();
				}
			}
		});
		jLabel11 = new javax.swing.JLabel();
		txtNhanVien = new javax.swing.JTextField();
		jLabel12 = new javax.swing.JLabel();
		txtNgayLap = new javax.swing.JTextField();
		jLabel14 = new javax.swing.JLabel();
		txtTien = new javax.swing.JTextField();
		jPanel1 = new javax.swing.JPanel();
		jScrollPane1 = new javax.swing.JScrollPane();
		tableDia = new javax.swing.JTable();
		txtTim = new javax.swing.JTextField();
		cbbTheLoai = new javax.swing.JComboBox<>();
		jLabel2 = new javax.swing.JLabel();
		btnTim = new javax.swing.JButton();
		jPanel2 = new javax.swing.JPanel();
		jScrollPane2 = new javax.swing.JScrollPane();
		tableDCTPThue = new javax.swing.JTable();
		jLabel3 = new javax.swing.JLabel();
		btnXoa = new javax.swing.JButton();
		btnThem = new javax.swing.JButton();
		btnCapNhat = new javax.swing.JButton();
		jLabel15 = new javax.swing.JLabel();
		btnBack = new javax.swing.JButton();

		jPanel3.setBackground(new java.awt.Color(255, 255, 255));
		jPanel3.setLayout(new java.awt.BorderLayout());

		DefaultListModel<KhachHang> dm_khachHang = new DefaultListModel<KhachHang>();
		jList1.setModel(dm_khachHang);
		jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		jList1.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				ChiTietKhachHang();
			}
		});
		jScrollPane3.setViewportView(jList1);

		jPanel3.add(jScrollPane3, java.awt.BorderLayout.CENTER);

		setBackground(new java.awt.Color(255, 255, 255));

		jLabel7.setText("Mã PT:");

		jLabel8.setText("Khách hàng:");

		jLabel9.setText("Tiền nợ:");

		txtMaPt.setEditable(false);

		txtTienNo.setEditable(false);

		btnThemKhachHang.setText("Thêm Khách hàng");

		btnLuu.setBackground(new java.awt.Color(51, 153, 255));
		btnLuu.setForeground(new java.awt.Color(255, 255, 255));
		btnLuu.setIcon(
				new javax.swing.ImageIcon("D:\\HK1_Nam_4\\XayDungPhanMem\\Netbeans\\DemoGui\\img\\save_30px.png")); // NOI18N
		btnLuu.setText("Lưu và in hóa đơn");

		jLabel11.setText("Người lập:");

		txtNhanVien.setEditable(false);

		jLabel12.setText("Ngày lập:");

		txtNgayLap.setEditable(false);

		jLabel14.setText("Tổng tiền:");

		txtTien.setEditable(false);

		jPanel1.setLayout(new java.awt.BorderLayout());

		tableDia.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {

		}, new String[] { "Mã đĩa", "Tên đĩa", "Thể loại" }) {
			boolean[] canEdit = new boolean[] { false, false, false };

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		tableDia.setRowHeight(22);
		tableDia.setFont(new java.awt.Font("Times New Roman", 0, 22)); // NOI18N
		tableDia.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		tableDia.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				DocDuLieu();
				int row = tableDia.getSelectedRow();
				TableModel model = tableDia.getModel();
				String maD = model.getValueAt(row, 0).toString();
				Dia dia = qldia.chiTietDia(maD);
				TieuDe td = qltd.chiTietTieuDe(dia.getTieuDe().getMaTD());
				TheLoai tl = qltl.chiTietTheLoai(dia.getTheLoai().getMaTL());
				ctpt = new ChiTietPhieuThue(new PhieuThue(maPT), new Dia(maD), "", tl.getGiaThue());
				setBtn(2);
			}
		});

		jScrollPane1.setViewportView(tableDia);

		jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

		cbbTheLoai.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Phim", "Game" }));
		cbbTheLoai.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				String theLoai = cbbTheLoai.getSelectedItem().toString();
				DocDuLieuDatabaseVaoTable("", theLoai, 1);
			}
		});

		jLabel2.setText("Danh sách đĩa:");

		btnTim.setBackground(new java.awt.Color(51, 153, 255));
		btnTim.setIcon(
				new javax.swing.ImageIcon("D:\\HK1_Nam_4\\XayDungPhanMem\\Netbeans\\QuanLy\\img\\search_30px.png")); // NOI18N
		btnTim.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				String txt = txtTim.getText().toString();
				DocDuLieuDatabaseVaoTable(txt, "", 0);
			}
		});

		jPanel2.setLayout(new java.awt.BorderLayout());

		tableDCTPThue.setFont(new java.awt.Font("Times New Roman", 0, 22)); // NOI18N
		tableDCTPThue.setModel(
				new DefaultTableModel(new Object[][] {}, new String[] { "Mã đĩa", "Tên đĩa", "Hạn trả", "Đơn giá" }) {
					boolean[] columnEditables = new boolean[] { false, false, false, false };

					public boolean isCellEditable(int row, int column) {
						return columnEditables[column];
					}
				});
		tableDCTPThue.setRowHeight(22);
		tableDCTPThue.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		tableDCTPThue.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				DocDuLieuDatabaseVaoTable("", "", 0);
				int row = tableDCTPThue.getSelectedRow();
				TableModel model = tableDCTPThue.getModel();
				String maDia = model.getValueAt(row, 0).toString();
				Date date;
				try {
					date = new SimpleDateFormat("yyyy-MM-dd").parse((String) model.getValueAt(row, 2));
					txtHanTra.setDate(date);
				} catch (ParseException e) {
					e.printStackTrace();
				}
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
				String hanTra = sdf.format(txtHanTra.getDate());
				int thanhTien = Integer.parseInt((String) model.getValueAt(row, 3).toString());
				ctpt = new ChiTietPhieuThue(new PhieuThue(maPT), new Dia(maDia), hanTra, thanhTien);

				setBtn(1);
			}
		});
		jScrollPane2.setViewportView(tableDCTPThue);

		jPanel2.add(jScrollPane2, java.awt.BorderLayout.CENTER);

		jLabel3.setText("Chi tiết thuê đĩa:");

		btnXoa.setBackground(new java.awt.Color(255, 0, 0));
		btnXoa.setForeground(new java.awt.Color(255, 255, 255));
		btnXoa.setIcon(
				new javax.swing.ImageIcon("D:\\HK1_Nam_4\\XayDungPhanMem\\Netbeans\\DemoGui\\img\\delete_30px.png")); // NOI18N
		btnXoa.setText("Xóa");
		btnXoa.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xoaDia();
				DocDuLieuDatabaseVaoTable("", "", 0);
				ctpt = null;
//				DocDuLieu();
			}
		});

		btnThem.setBackground(new java.awt.Color(51, 153, 255));
		btnThem.setForeground(new java.awt.Color(255, 255, 255));
		btnThem.setIcon(
				new javax.swing.ImageIcon("D:\\HK1_Nam_4\\XayDungPhanMem\\Netbeans\\DemoGui\\img\\add_30px.png")); // NOI18N
		btnThem.setText("Thêm");
		btnThem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				if (themDia()) {
					DocDuLieuDatabaseVaoTable("", "", 0);
					ctpt = null;
					DocDuLieu();
				}
			}
		});

		btnCapNhat.setBackground(new java.awt.Color(255, 204, 51));
		btnCapNhat.setForeground(new java.awt.Color(255, 255, 255));
		btnCapNhat.setIcon(
				new javax.swing.ImageIcon("D:\\HK1_Nam_4\\XayDungPhanMem\\Netbeans\\DemoGui\\img\\refresh_30px.png")); // NOI18N
		btnCapNhat.setText("Cập nhật");
		btnCapNhat.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				if (capNhatDia()) {
					ctpt = null;
					DocDuLieu();
				}
			}
		});

		jLabel15.setText("Hạn trả:");

		btnBack.setBackground(new java.awt.Color(255, 255, 255));
		btnBack.setIcon(new javax.swing.ImageIcon(
				"D:\\HK1_Nam_4\\XayDungPhanMem\\Netbeans\\QuanLy\\img\\icons8-back-arrow-30.png")); // NOI18N
		btnBack.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				pt.DS_Phieu_pn.DocDuLieuDatabaseVaoTable("", 0);
				pt.dsPhieu(tk);
			}
		});

		txtHanTra = new JDateChooser();

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		layout.setHorizontalGroup(layout.createParallelGroup(Alignment.TRAILING).addGroup(layout.createSequentialGroup()
				.addGap(23)
				.addGroup(layout.createParallelGroup(Alignment.LEADING)
						.addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(Alignment.TRAILING)
								.addGroup(layout.createSequentialGroup()
										.addComponent(jLabel14, GroupLayout.PREFERRED_SIZE, 112,
												GroupLayout.PREFERRED_SIZE)
										.addGap(18).addComponent(txtTien, GroupLayout.PREFERRED_SIZE, 420,
												GroupLayout.PREFERRED_SIZE))
								.addGroup(layout.createSequentialGroup()
										.addComponent(jLabel9, GroupLayout.PREFERRED_SIZE, 90,
												GroupLayout.PREFERRED_SIZE)
										.addGap(40).addComponent(txtTienNo, GroupLayout.PREFERRED_SIZE, 420,
												GroupLayout.PREFERRED_SIZE))
								.addGroup(layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
												.addComponent(jLabel7, GroupLayout.DEFAULT_SIZE,
														GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(jLabel8, GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE))
										.addGap(40)
										.addGroup(layout.createParallelGroup(Alignment.LEADING)
												.addGroup(layout.createSequentialGroup()
														.addComponent(txtKhachHang, GroupLayout.PREFERRED_SIZE, 240,
																GroupLayout.PREFERRED_SIZE)
														.addGap(11).addComponent(btnThemKhachHang,
																GroupLayout.PREFERRED_SIZE, 170,
																GroupLayout.PREFERRED_SIZE))
												.addComponent(txtMaPt, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE,
														420, GroupLayout.PREFERRED_SIZE))))
								.addPreferredGap(ComponentPlacement.RELATED, 131, Short.MAX_VALUE)
								.addGroup(layout.createParallelGroup(Alignment.TRAILING)
										.addGroup(layout.createSequentialGroup()
												.addComponent(jLabel11, GroupLayout.PREFERRED_SIZE, 90,
														GroupLayout.PREFERRED_SIZE)
												.addGap(40).addComponent(txtNhanVien, GroupLayout.PREFERRED_SIZE, 420,
														GroupLayout.PREFERRED_SIZE))
										.addGroup(
												layout.createSequentialGroup()
														.addComponent(jLabel12, GroupLayout.PREFERRED_SIZE, 90,
																GroupLayout.PREFERRED_SIZE)
														.addGap(40).addComponent(txtNgayLap, GroupLayout.PREFERRED_SIZE,
																420, GroupLayout.PREFERRED_SIZE))
										.addComponent(btnBack, GroupLayout.PREFERRED_SIZE, 51,
												GroupLayout.PREFERRED_SIZE)
										.addGroup(layout.createSequentialGroup()
												.addComponent(btnThem, GroupLayout.PREFERRED_SIZE, 170,
														GroupLayout.PREFERRED_SIZE)
												.addGap(20)
												.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
														.addComponent(btnLuu, GroupLayout.DEFAULT_SIZE,
																GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
														.addGroup(Alignment.TRAILING, layout.createSequentialGroup()
																.addComponent(btnCapNhat, GroupLayout.PREFERRED_SIZE,
																		170, GroupLayout.PREFERRED_SIZE)
																.addGap(20).addComponent(btnXoa,
																		GroupLayout.PREFERRED_SIZE, 170,
																		GroupLayout.PREFERRED_SIZE))))))
						.addGroup(layout.createSequentialGroup().addGap(1).addGroup(layout
								.createParallelGroup(Alignment.LEADING)
								.addComponent(jLabel2, GroupLayout.PREFERRED_SIZE, 210, GroupLayout.PREFERRED_SIZE)
								.addGroup(layout.createParallelGroup(Alignment.TRAILING)
										.addGroup(layout.createSequentialGroup()
												.addComponent(txtTim, GroupLayout.PREFERRED_SIZE, 324,
														GroupLayout.PREFERRED_SIZE)
												.addPreferredGap(ComponentPlacement.UNRELATED)
												.addComponent(btnTim, GroupLayout.PREFERRED_SIZE, 37,
														GroupLayout.PREFERRED_SIZE)
												.addPreferredGap(ComponentPlacement.UNRELATED).addComponent(cbbTheLoai,
														GroupLayout.PREFERRED_SIZE, 169, GroupLayout.PREFERRED_SIZE))
										.addComponent(jPanel1, Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 550,
												GroupLayout.PREFERRED_SIZE)))
								.addPreferredGap(ComponentPlacement.RELATED, 121, Short.MAX_VALUE)
								.addGroup(layout.createParallelGroup(Alignment.LEADING)
										.addComponent(jLabel3, GroupLayout.PREFERRED_SIZE, 210,
												GroupLayout.PREFERRED_SIZE)
										.addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, 550,
												GroupLayout.PREFERRED_SIZE)
										.addGroup(layout.createSequentialGroup()
												.addComponent(jLabel15, GroupLayout.PREFERRED_SIZE, 90,
														GroupLayout.PREFERRED_SIZE)
												.addGap(44).addComponent(txtHanTra, GroupLayout.PREFERRED_SIZE, 220,
														GroupLayout.PREFERRED_SIZE)))))
				.addGap(19)));
		layout.setVerticalGroup(layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(Alignment.LEADING).addComponent(jLabel7)
								.addGroup(layout.createParallelGroup(Alignment.BASELINE)
										.addComponent(txtMaPt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
												GroupLayout.PREFERRED_SIZE)
										.addComponent(btnBack)))
						.addGap(12)
						.addGroup(layout.createParallelGroup(Alignment.LEADING).addComponent(jLabel8)
								.addComponent(txtKhachHang, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
										GroupLayout.PREFERRED_SIZE)
								.addComponent(btnThemKhachHang).addComponent(jLabel11)
								.addComponent(txtNhanVien, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
										GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(ComponentPlacement.UNRELATED)
						.addGroup(
								layout.createParallelGroup(Alignment.LEADING).addComponent(jLabel9)
										.addComponent(txtTienNo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
												GroupLayout.PREFERRED_SIZE)
										.addComponent(jLabel12).addComponent(
												txtNgayLap, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
												GroupLayout.PREFERRED_SIZE))
						.addGap(18)
						.addGroup(layout.createParallelGroup(Alignment.LEADING).addGroup(layout.createSequentialGroup()
								.addComponent(jLabel2).addGap(19)
								.addGroup(layout.createParallelGroup(Alignment.LEADING)
										.addComponent(txtTim, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
												GroupLayout.PREFERRED_SIZE)
										.addGroup(layout.createParallelGroup(Alignment.BASELINE)
												.addComponent(cbbTheLoai, GroupLayout.PREFERRED_SIZE,
														GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
												.addComponent(jLabel15))
										.addComponent(btnTim, GroupLayout.PREFERRED_SIZE, 26,
												GroupLayout.PREFERRED_SIZE))
								.addGap(32)
								.addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, 220, GroupLayout.PREFERRED_SIZE))
								.addGroup(layout.createSequentialGroup().addComponent(jLabel3).addGap(18)
										.addComponent(txtHanTra, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
												GroupLayout.PREFERRED_SIZE)
										.addGap(33).addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, 220,
												GroupLayout.PREFERRED_SIZE)))
						.addPreferredGap(ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
						.addGroup(layout.createParallelGroup(Alignment.LEADING).addComponent(jLabel14)
								.addComponent(txtTien, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
										GroupLayout.PREFERRED_SIZE)
								.addComponent(btnCapNhat, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
								.addGroup(layout.createSequentialGroup().addGap(1)
										.addGroup(layout.createParallelGroup(Alignment.LEADING).addComponent(btnThem)
												.addComponent(btnXoa))))
						.addPreferredGap(ComponentPlacement.RELATED).addComponent(btnLuu).addContainerGap()));
		this.setLayout(layout);

	}

	// Lấy thông tin Khách hàng
	private void txtKhachHangKeyPressed(java.awt.event.KeyEvent evt) {
		String khachHang_tim = txtKhachHang.getText().trim();
		if (khachHang_tim.equals("") || khachHang_tim.isEmpty()) {
			DocDuLieuDatabaseVaoList("");
			jPopupMenu1.show(txtKhachHang, 0, txtKhachHang.getHeight());
		} else {
			DocDuLieuDatabaseVaoList(khachHang_tim);
			jPopupMenu1.show(txtKhachHang, 0, txtKhachHang.getHeight());
		}
	}

	public void ChiTietKhachHang() {
		int row = jList1.getSelectedIndex();
		ListModel<KhachHang> model = jList1.getModel();
		kh = model.getElementAt(row);
		txtKhachHang.setText(kh.getTenKH());
		jPopupMenu1.setVisible(false);

		try {
			int congNo = qlkh.congNo(kh.getMaKH());
			txtTienNo.setText("" + congNo);
		} catch (Exception e) {
			txtTienNo.setText("0");
		}
	}

	public void XoaHetDuLieuTrenListModel() {
		DefaultListModel<KhachHang> dm = (DefaultListModel<KhachHang>) jList1.getModel();
		dm.clear();
	}

	public void DocDuLieuDatabaseVaoList(String txt) {
		XoaHetDuLieuTrenListModel();
		List<KhachHang> list = new ArrayList<KhachHang>();
		qlkh = new QuanLyKhachHang();
		if (txt.equals("") || txt.isEmpty()) {
			list = qlkh.dsKhachHang();
		} else {
			try {
				list = qlkh.tim_KhachHang(txt);
			} catch (Exception e) {
				XoaHetDuLieuTrenListModel();
			}
			DefaultListModel<KhachHang> dm = (DefaultListModel<KhachHang>) jList1.getModel();
			for (KhachHang khachHang : list) {
				dm.addElement(khachHang);
			}
		}
	}

	// Danh sách đĩa
	public void XoaHetDuLieuTrenTableModel() {
		DefaultTableModel dm = (DefaultTableModel) tableDia.getModel();
		dm.getDataVector().removeAllElements();
	}

	public void DocDuLieuDatabaseVaoTable(String txt, String theLoai, int tim) {
		XoaHetDuLieuTrenTableModel();
		List<Dia> list = new ArrayList<Dia>();
		qldia = new QuanLyDia();
		qltd = new QuanLyTieuDe();
		qltl = new QuanLyTheLoai();

		if (txt.equals("")) {
			list = qldia.dsDia_CoSan();
		} else {
			list = qldia.tim_Dia_Co_San(txt);
		}

		if (list.size() == 0) {
			list = qldia.dsDia_CoSan();
			JOptionPane.showMessageDialog(null, "Không tim thấy");
		}

		DefaultTableModel dm = (DefaultTableModel) tableDia.getModel();
		if (tim == 1) {
			for (Dia dia : list) {
				TheLoai tl = qltl.chiTietTheLoai(dia.getTheLoai().getMaTL());
				if (tl.getTenTL().equalsIgnoreCase(theLoai)) {
					TieuDe td = qltd.chiTietTieuDe(dia.getTieuDe().getMaTD());
					dm.addRow(new Object[] { dia.getMaDia(), td.getTenTD(), tl.getTenTL() });
				}
			}
		} else {
			for (Dia dia : list) {
				TheLoai tl = qltl.chiTietTheLoai(dia.getTheLoai().getMaTL());
				TieuDe td = qltd.chiTietTieuDe(dia.getTieuDe().getMaTD());
				dm.addRow(new Object[] { dia.getMaDia(), td.getTenTD(), tl.getTenTL() });
			}
		}

	}

	// Mã phiếu thuê
	public void getID() {
		int id = qlpt.getMaPhieuThue();
		maPT = null;
		if (id == 0) {
			maPT = "PT00001";
		} else if (id < 10)
			maPT = "PT0000" + id;
		else if (id < 100)
			maPT = "PT000" + id;
		else if (id < 1000)
			maPT = "PT00" + id;
		else if (id < 10000)
			maPT = "PT0" + id;
		else
			maPT = "PT" + id;

		txtMaPt.setText(maPT);
	}

	// Tính tổng tiền:
	public void tinhTongTien_CTPT() {
		int tongTien = 0;
		for (ChiTietPhieuThue ctpt : list_CTPT) {
			tongTien += ctpt.getThanhTien();
		}
		txtTien.setText("" + tongTien);
	}

	public boolean kiemTraTrungDia(ChiTietPhieuThue ctpt) {
		for (ChiTietPhieuThue chiTietPhieuThue : list_CTPT) {
			if (chiTietPhieuThue.getDia().getMaDia().equalsIgnoreCase(ctpt.getDia().getMaDia()))
				return false;
		}
		return true;
	}

	// Thêm đĩa
	public boolean themDia() {
		if (ctpt == null) {
			JOptionPane.showMessageDialog(null, "Vui lòng chọn đĩa");
			return false;
		} else {
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			String date = sdf.format(txtHanTra.getDate());
			ctpt.setHanTra(date);
			if (kiemTraTrungDia(ctpt)) {
				if (txtHanTra.getDate().before(new Date())) {
					txtHanTra.requestFocus();
					JOptionPane.showMessageDialog(null, "Chọn hạn trả sau hôm nay");
					return false;
				} else {
					list_CTPT.add(ctpt);
					Dia dia = qldia.chiTietDia(ctpt.getDia().getMaDia());
					TieuDe td = qltd.chiTietTieuDe(dia.getTieuDe().getMaTD());
//					DocDuLieu();
//					dm_CTPT.addRow(new Object[] { dia.getMaDia(), td.getTenTD(), ctpt.getHanTra(), ctpt.getThanhTien() });
					tinhTongTien_CTPT();
					return true;
				}
			} else {
				JOptionPane.showMessageDialog(null, "Đĩa đã được thêm");
				return false;
			}
		}
	}

	public boolean capNhatDia() {
		if (ctpt == null) {
			JOptionPane.showMessageDialog(null, "Vui lòng chọn đĩa");
			return false;
		} else {
			try {
				if (txtHanTra.getDate().before(new Date())) {
					txtHanTra.requestFocus();
					JOptionPane.showMessageDialog(null, "Chọn hạn trả sau hôm nay");
					return false;
				} else {
					for (ChiTietPhieuThue chiTietPhieuThue : list_CTPT) {
						if (ctpt.getDia().getMaDia().equalsIgnoreCase(chiTietPhieuThue.getDia().getMaDia())) {
							SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
							String date = sdf.format(txtHanTra.getDate());
							chiTietPhieuThue.setHanTra(date);
							break;
						}
					}
				}
//				DocDuLieu();
				return true;
			} catch (Exception e) {
				JOptionPane.showMessageDialog(null, "Vui lòng chọn hạn trả");
				return false;
			}
		}
	}

	public void DocDuLieu() {
		DefaultTableModel dm = (DefaultTableModel) tableDCTPThue.getModel();
		dm.getDataVector().removeAllElements();
		for (ChiTietPhieuThue ctpt : list_CTPT) {
			Dia dia = qldia.chiTietDia(ctpt.getDia().getMaDia());
			TieuDe td = qltd.chiTietTieuDe(dia.getTieuDe().getMaTD());
			dm.addRow(new Object[] { dia.getMaDia(), td.getTenTD(), ctpt.getHanTra(), ctpt.getThanhTien() });
		}
	}

	public void xoaDia() {
		if (list_CTPT.isEmpty()) {
			JOptionPane.showMessageDialog(null, "Không có đĩa để xóa");
		} else {
			try {
				int row = tableDCTPThue.getSelectedRow();
				DefaultTableModel dm = (DefaultTableModel) tableDCTPThue.getModel();
				if (tableDCTPThue.getRowCount() == 1) {
					dm.removeRow(0);
				} else {
					dm.removeRow(row);
				}
				list_CTPT.remove(row);
				DocDuLieu();
				tinhTongTien_CTPT();
			} catch (Exception e) {
				DocDuLieu();
				JOptionPane.showMessageDialog(null, "Chọn đĩa cần xóa");
			}
		}

	}

	public void clearText() {
		getID();

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String date = sdf.format(new Date());
		txtNgayLap.setText(date);
		if (tk != null)
			txtNhanVien.setText(tk.getHoTen());
		txtHanTra.setDate(new Date());
		txtTienNo.setText("0");
		txtTien.setText("0");
		txtKhachHang.setText("");
		txtPrint.setText("");
		bill = "";
		thanhToan = 0;
		kh = null;
		ctpt = null;
		list_CTPT = new ArrayList<ChiTietPhieuThue>();
		DefaultTableModel dm = (DefaultTableModel) tableDCTPThue.getModel();
		dm.setRowCount(0);
		txtTim.setText("");
		DocDuLieuDatabaseVaoTable("", "", 0);
	}

	public void LapPhieuThue() {
		if (kh == null) {
			txtKhachHang.requestFocus();
			JOptionPane.showMessageDialog(null, "Chọn khách hàng");
		} else if (list_CTPT.isEmpty()) {
			JOptionPane.showMessageDialog(null, "Vui lòng thêm đĩa vào phiếu thuê");
		} else {
			String ngayLap = txtNgayLap.getText().toString();

			int tongTien = Integer.parseInt(txtTien.getText().toString());

			PhieuThue pt = new PhieuThue(kh, ngayLap, tk, tongTien);

			qlpt.themPhieuThue(pt);
			try {
				for (ChiTietPhieuThue ct_pt_list : list_CTPT) {
					qldia.capNhatTinhTrangDia(1, ct_pt_list.getDia().getMaDia());
					qlct_pt.them_CTPT(ct_pt_list);
				}
			} catch (Exception e) {
				JOptionPane.showMessageDialog(null, "Tạo phiếu không thành công");
			}
			JOptionPane.showMessageDialog(null, "Tạo phiếu thành công");
			main.dia_pn.DocDuLieuDatabaseVaoTable("");
			main.traCuu_pn.DocDuLieuDatabaseVaoTable("");
			main.bcDia_pn.DocDuLieuDatabaseVaoTable("");
			main.datHang_pn.lapDatHang_pn.DocDuLieuDatabaseVaoTable("");
		}
	}

	public void hienThiThanhToan(int tongTien) {
		int response = JOptionPane.showConfirmDialog(null, "Bạn muốn thanh toán công nợ hay không?", "Xác nhận",
				JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
		if (response == JOptionPane.YES_OPTION) {
			dialog = new ThanhToan_Dialog(main, true, 2);
//			ThanhToan_Dialog dialog = new ThanhToan_Dialog(main, true);
			dialog.setTitle("Thanh toán phí trễ hạn");
			dialog.setLocationRelativeTo(main);
			dialog.setData(kh);
			dialog.setTaiKhoan(tk);
			dialog.setVisible(true);
		}
	}

	public void setBtn(int bang) {
		if (bang == 1) {
			btnCapNhat.setEnabled(true);
			btnXoa.setEnabled(true);
			btnThem.setEnabled(false);
		} else {
			btnThem.setEnabled(true);
			btnCapNhat.setEnabled(false);
			btnXoa.setEnabled(false);
		}
	}

	public static void setData(TaiKhoan tk_sql) {
		if (!(tk_sql == null)) {
			tk = tk_sql;
			txtNhanVien.setText(tk.getHoTen());
		}
	}

	public void printHoaDon(String maPT, int thanhToan) {
		try {
			PhieuThue pt = qlpt.chiTietPhieuThue(maPT);
			KhachHang kh = qlkh.chiTietKhachHang(pt.getKhachHang().getMaKH());
			TaiKhoan tk = qltk.chiTietTaiKhoan(pt.getNhanVien().getTenTK());
			List<ChiTietPhieuThue> list = new ArrayList<ChiTietPhieuThue>();
			qlct_pt = new QuanLyCT_PhieuThue();
			list = qlct_pt.getCTPT_TheoPT(pt.getMaPT());

			bill = "\n" + "Cửa hàng cho thuê băng đĩa " + "\n" + "          Nhóm 17         " + "\n" + "\n"

					+ "=========================HÓA ĐƠN CHO THUÊ============================" + "\n" + "\n"
					+ "Khách hàng: " + kh.getTenKH() + "\n" + "Ngày lập phiếu: " + pt.getNgayThue() + "\n"
					+ "Nhân viên: " + tk.getHoTen() + "\n\n" + "Chi tiết thuê: " + "\n"
					+ "----------------------------------------------------------------------------------------------------------------------\n"
					+ "         MaBD                     Tên đĩa                                    Hạn trả                Thành tiền "
					+ "\n"
					+ "----------------------------------------------------------------------------------------------------------------------\n";

			for (ChiTietPhieuThue ct : list) {
				Dia d = qldia.chiTietDia(ct.getDia().getMaDia());
				TieuDe td = qltd.chiTietTieuDe(d.getTieuDe().getMaTD());
				Formatter formatter = new Formatter();
				bill = bill + "        " + d.getMaDia() + "  "
						+ formatter.format("%-35s %20s %20s \n", td.getTenTD(), ct.getHanTra(), ct.getThanhTien())
						+ "------------------------------------------------------------------------------------------------------------------------\n";
			}

			bill = bill
					+ "                                                                                            Tổng tiền thuê : "
					+ pt.getTongTien() + "\n"
					+ "                                                                                            Thanh toán nợ : "
					+ thanhToan + "\n"
					+ "                                                                                            Tổng tiền : "
					+ (thanhToan + pt.getTongTien()) + "\n\n"
					+ "============================CẢM ƠN QUÝ KHÁCH===========================" + "\n" + "\n";

			txtPrint.setText(bill);
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			System.out.println("Err 1");
		}
	}

	public static void setThanhToan(int tt) {
		thanhToan = tt;
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton btnBack;
	private javax.swing.JButton btnCapNhat;
	private javax.swing.JButton btnLuu;
	private javax.swing.JButton btnThem;
	private javax.swing.JButton btnThemKhachHang;
	private javax.swing.JButton btnXoa;
	private javax.swing.JComboBox<String> cbbTheLoai;
	private javax.swing.JButton btnTim;
	private javax.swing.JLabel jLabel11;
	private javax.swing.JLabel jLabel12;
	private javax.swing.JLabel jLabel14;
	private javax.swing.JLabel jLabel15;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel7;
	private javax.swing.JLabel jLabel8;
	private javax.swing.JLabel jLabel9;
	private javax.swing.JList<KhachHang> jList1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPopupMenu jPopupMenu1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JTable tableDCTPThue;
	private javax.swing.JTable tableDia;
	private javax.swing.JTextField txtKhachHang;
	private javax.swing.JTextField txtMaPt;
	private javax.swing.JTextField txtNgayLap;
	public static javax.swing.JTextField txtNhanVien;
	private javax.swing.JTextField txtTien;
	private javax.swing.JTextField txtTienNo;
	private javax.swing.JTextField txtTim;
	private JDateChooser txtHanTra;
	private DefaultTableModel dm_CTPT;

	private QuanLyDia qldia;
	private QuanLyKhachHang qlkh;
	private QuanLyTieuDe qltd;
	private QuanLyTheLoai qltl;
	private QuanLyPhieuThue qlpt;
	private QuanLyCT_PhieuThue qlct_pt;
	private QuanLyTaiKhoan qltk;

	private KhachHang kh;
	private String maPT;
	private List<ChiTietPhieuThue> list_CTPT;
	private ChiTietPhieuThue ctpt;

	private PhieuThue_Gui pt;
	private Main_Gui main;

	private javax.swing.JTextArea txtPrint;

	public static TaiKhoan tk;

	public static ThanhToan_Dialog dialog;

	public static int thanhToan;
	public static String bill;
}
